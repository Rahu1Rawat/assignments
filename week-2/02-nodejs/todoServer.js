/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const path = require("path");
const app = express();

app.use(bodyParser.json());

const filePath = path.join(__dirname, "files", "todo.json");

fs.readFile(filePath, "utf-8", (err, data) => {
  if (err) {
    console.error(err);
  } else {
    todos = JSON.parse(data);
  }
});
// ! Retrieve all todo items.
app.get("/todos", (req, res) => {
  res.json(todos);
});

// ! Retrieve a specific todo item by ID.
app.get("/todos/:id", (req, res) => {
  const todoId = parseInt(req.params.id);
  if (todoId >= 1 && todoId < todos.length) {
    res.json(todos[todoId - 1]);
  } else {
    res.status(404).send();
  }
});

// ! Create a new todo item.
app.post("/todos", (req, res) => {
  const id = todos.length + 1;
  const newTodo = { id, ...req.body };
  todos.push(newTodo);
  fs.writeFile(filePath, JSON.stringify(todos), (err) => {
    if (err) {
      throw err;
    } else {
      res.status(201).json(newTodo);
    }
  });
});

// ! Update an existing todo item by ID.
app.put("/todos/:id", (req, res) => {
  const todoId = parseInt(req.params.id);
  const index = todos.findIndex((todo) => todo.id === todoId);
  if (index === -1) {
    res.status(404).json({ error: "Not Found" });
  } else {
    const updatedTodo = { ...todos[index], ...req.body };
    todos[index] = updatedTodo;
    fs.writeFile(filePath, JSON.stringify(todos), (err) => {
      if (err) {
        throw err;
      } else {
        res.status(200).json(updatedTodo);
      }
    });
  }
});

// ! Delete a todo item by ID.
app.delete("/todos/:id", (req, res) => {
  const deleteId = parseInt(req.params.id);
  const index = todos.findIndex((todo) => todo.id === deleteId);
  if (index === -1) {
    res.status(404).send();
    return;
  }
  todos.splice(index, 1);
  fs.writeFile(filePath, JSON.stringify(todos), (err) => {
    if (err) {
      throw err;
    } else {
      res.status(200).send();
    }
  });
});
app.listen(3000);
module.exports = app;
